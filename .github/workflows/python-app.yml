name: Python flask-application
env:
  DEPLOY_PACKAGE_NAME : "version-${{ github.sha }}"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Test:

    runs-on: ubuntu-latest
    env:
         TEST_RESULTS: $(cat test.log)
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
     

    - name: log untrusted output
      run: |

        # enable workflow command processing
        echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Test API
      run: |
              python3 app.py &
              python3 -m pytest test.py --junit-xml pytest.xml
              
    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
          name: Unit_Test_Results #(Python ${{ matrix.python-version }})
          path: pytest.xml
    
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: Test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml
      
      - name: check location
        run: |
              ls -l 
              ls -l artifacts/Unit_Test_Results/
      
      - uses: actions/checkout@master
      - name: send custom message with args
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Tests passed, please check
          message_file: artifacts/Unit_Test_Results/pytest.xml
        
      - name: Create a .zip package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*
      
      - name: Creating Artifacts and putting to dewnloads folder
        run: |
          mkdir downloads
          mv *.zip downloads
          
      - name: Use the upload Artifact GitHub Action
        uses: actions/upload-artifact@v2
        with:
          name: assets-for-download
          path: downloads
          
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: downloads  
 

      - uses: actions/checkout@master
      - name: send custom message with args
        uses: appleboy/telegram-action@master
        with:
         to: ${{ secrets.TELEGRAM_TO }}
         token: ${{ secrets.TELEGRAM_TOKEN }}
         args: The build is created successfully - ${{ env.DEPLOY_PACKAGE_NAME }}
        

  Delivery:
  
        runs-on: self-hosted
        needs: [publish-test-results]
        
        steps:
             
        - name: Download the artifact
          uses: actions/download-artifact@v2
          with:
              name: assets-for-download
              path: downloads
              
        - name: Download the artifact to another directory
          uses: actions/download-artifact@v2
          with:
              name: assets-for-download
              path: /home/vova/artifacts

        #- uses: actions/checkout@v2
        - name: Run Ansible Playbook
          run: |
               cd /home/vova/ans_project
               # ansible-playbook first-deploy.yml --limit web-green,web-blue
               ansible-playbook updating-deploys.yml --limit web-green
               ansible-playbook playbook-haproxy-green.yml
